import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
            seedColor: const Color.fromARGB(255, 151, 136, 117)),
        useMaterial3: true,
      ),
      home: const ZikrList(),
    );
  }
}

class ZikrList extends StatefulWidget {
  const ZikrList({super.key});

  @override
  _ZikrListState createState() => _ZikrListState();
}

class _ZikrListState extends State<ZikrList> {
  late SharedPreferences _prefs;
  List<Zikr> zikrs = [];

  @override
  void initState() {
    super.initState();
    initSharedPreferences();
  }

  Future<void> initSharedPreferences() async {
    _prefs = await SharedPreferences.getInstance();
    await fetchZikrsFromLocal();
  }

  Future<void> fetchZikrsFromLocal() async {
    final List<String>? zikrList = _prefs.getStringList('zikr_list');
    if (zikrList != null) {
      setState(() {
        zikrs = zikrList
            .map((jsonString) => Zikr.fromJson(jsonDecode(jsonString)))
            .toList();
      });
    }
  }

  Future<void> addZikrLocally(Zikr zikr) async {
    zikrs.add(zikr);
    bool result = await _prefs.setStringList(
        'zikr_list', zikrs.map((zikr) => jsonEncode(zikr.toJson())).toList());
    print("Data saved: $result");
    setState(() {});
  }

  Future<void> incrementZikrCount(int index) async {
    setState(() {
      zikrs[index].count++;
    });
    await _prefs.setStringList(
        'zikr_list', zikrs.map((zikr) => zikr.toJson()).toList());
  }

  Future<void> updateZikr(int index, String newTitle, int newCount) async {
    // Update the Zikr in the local list
    setState(() {
      zikrs[index].title = newTitle;
      zikrs[index].count = newCount;
    });

    // Update the Zikr in SharedPreferences
    await _prefs.setStringList(
        'zikr_list', zikrs.map((zikr) => jsonEncode(zikr.toJson())).toList());
  }

  Future<void> deleteZikr(int index) async {
    zikrs.removeAt(index);
    await _prefs.setStringList(
        'zikr_list', zikrs.map((zikr) => zikr.toJson()).toList());
    setState(() {});
  }

  void showEditDialog(BuildContext context, int index) {
    TextEditingController titleController =
        TextEditingController(text: zikrs[index].title);
    TextEditingController countController =
        TextEditingController(text: zikrs[index].count.toString());

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Edit Zikr'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: <Widget>[
              TextField(
                controller: titleController,
                decoration: InputDecoration(labelText: 'Zikr Title'),
              ),
              TextField(
                controller: countController,
                decoration: InputDecoration(labelText: 'Zikr Count'),
                keyboardType: TextInputType.number,
              ),
            ],
          ),
          actions: <Widget>[
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                updateZikr(index, titleController.text,
                    int.parse(countController.text));
                Navigator.of(context).pop();
              },
              child: Text('Update'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Zikr List'),
      ),
      body: ListView.builder(
        itemCount: zikrs.length,
        itemBuilder: (context, index) {
          return ListTile(
            title: Text(zikrs[index].title),
            subtitle: Text('Count: ${zikrs[index].count}'),
            trailing: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                IconButton(
                  icon: Icon(Icons.add),
                  onPressed: () => incrementZikrCount(index),
                ),
                IconButton(
                  icon: Icon(Icons.edit),
                  onPressed: () => showEditDialog(context, index),
                ),
                IconButton(
                  icon: Icon(Icons.delete),
                  onPressed: () => deleteZikr(index),
                ),
              ],
            ),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(
                builder: (context) => AddZikrPage(addZikrLocally)),
          );
        },
        child: Icon(Icons.add),
      ),
    );
  }
}

class AddZikrPage extends StatelessWidget {
  final Function(Zikr) onAdd;

  AddZikrPage(this.onAdd);

  @override
  Widget build(BuildContext context) {
    String zikrTitle = '';
    return Scaffold(
      appBar: AppBar(
        title: Text('Add Zikr'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            TextField(
              decoration: InputDecoration(labelText: 'Zikr Title'),
              onChanged: (value) {
                zikrTitle = value;
              },
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                if (zikrTitle.isNotEmpty) {
                  Zikr newZikr = Zikr(title: zikrTitle, count: 0);
                  onAdd(newZikr);
                  Navigator.pop(context);
                }
              },
              child: Text('Add Zikr'),
            ),
          ],
        ),
      ),
    );
  }
}

class Zikr {
  String title;
  int count;

  Zikr({required this.title, required this.count});

  factory Zikr.fromJson(String jsonString) {
    final Map<String, dynamic> json = jsonDecode(jsonString);
    return Zikr(
      title: json['title'],
      count: json['count'],
    );
  }

  String toJson() {
    return jsonEncode({
      'title': title,
      'count': count,
    });
  }
}
